generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PARTICIPANT
  COORDINATOR
  ADMIN
  SUPER_ADMIN
}

model Payment {
  signature         String?
  amount            Float         @default(0)
  status            PaymentStatus @default(PENDING)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  orderCreationId   String
  razorpayPaymentId String        @id
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String        @map("user_id")

  @@index([userId])
  @@map("payments")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime? @map("email_verified")
  image                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  role                  UserRole  @default(PARTICIPANT)
  accounts              Account[]
  events                String[]
  teams                 Team[]
  college               String?
  contact               String?
  registrationEmailSent Boolean?  @default(false)
  payment               Payment[]
  sessions              Session[]

  @@map("users")
}

model Team {
  id         String   @id @default(cuid())
  name       String
  event      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")

  @@map("teams")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id                  String    @id @default(cuid())
  name                String
  description         String
  category            String
  rules               String[]
  prerequisites       String[]
  general_rules       String[]
  thumbnail           String
  startTime           DateTime
  endTime             DateTime?
  costs               Int
  teamEvent           Boolean   @default(false) @map("team_event")
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  isFinished          Boolean   @default(false)
  facultyCoordinators Json
  studentCoordinators Json

  @@map("events")
}

model EventRegistrationCount {
  id           String   @id @default(cuid())
  eventName    String   @unique
  currentCount Int      @default(0)
  maxLimit     Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("event_registration_counts")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
